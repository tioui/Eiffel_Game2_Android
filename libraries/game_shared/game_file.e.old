note
	description: "[
				Represent a file in an Android System.
				With this, you can read information from a file
			]"
	author: "Louis Marchand"
	date: "Thu, 02 Apr 2015 04:11:03 +0000"
	revision: "2.0"
	todo: "can_read_16, can_read_32, can_read_64"

class
	GAME_FILE

inherit
	UNBOUNDED [CHARACTER]

	SEQUENCE [CHARACTER]
		rename
			index as position
		undefine
			prune
		redefine
			off, append, replaceable
		end

	IO_MEDIUM
		rename
			handle as descriptor,
			handle_available as descriptor_available
		undefine
			read_stream_thread_aware,
			read_line_thread_aware
		end

create
	make_with_name,
	make_with_path,
	make_open_read,
	make_open_write,
	make_open_append,
	make_open_read_write,
	make_create_read_write,
	make_open_read_append

feature {NONE} -- Implementation

	make_with_name(a_name: READABLE_STRING_GENERAL)
			-- Create file object with `a_name' as file name.
		require
			Name_exists: a_name /= Void
			Name_not_empty: not a_name.is_empty
		do
			set_name (fn)
			mode := Closed_file
			file_pointer := default_pointer
			create last_string.make_empty
			create internal_mutex.make
			descriptor_available := False
		ensure
			file_named: internal_name = a_name
			file_closed: is_closed
		end

	make_with_path (a_path: PATH)
			-- Create file object with `a_path' as path.
		require
			a_path_attached: a_path /= Void
			a_path_not_empty: not a_path.is_empty
		do
			make_with_name(a_path.name)
		ensure
			path_set: path.same_as (a_path)
			file_closed: is_closed
		end

	make_open_read (a_name: READABLE_STRING_GENERAL)
			-- Create file object with `a_name' as file name
			-- and open file in read mode.
		require
			string_exists: a_name /= Void
			string_not_empty: not a_name.is_empty
		do
			make_with_name (a_name)
			open_read
		ensure
			file_named: internal_name = a_name
			exists: exists
			open_read: is_open_read
		end

	make_open_write (a_name: READABLE_STRING_GENERAL)
			-- Create file object with `a_name' as file name
			-- and open file for writing;
			-- create it if it does not exist.
		require
			string_exists: a_name /= Void
			string_not_empty: not a_name.is_empty
		do
			make_with_name (a_name)
			open_write
		ensure
			file_named: internal_name = a_name
			exists: exists
			open_write: is_open_write
		end

	make_open_append (a_name: READABLE_STRING_GENERAL)
			-- Create file object with `a_name' as file name
			-- and open file in append-only mode.
		require
			string_exists: a_name /= Void
			string_not_empty: not a_name.is_empty
		do
			make_with_name (a_name)
			open_append
		ensure
			file_named: internal_name = a_name
			exists: exists
			open_append: is_open_append
		end

	make_open_read_write (a_name: READABLE_STRING_GENERAL)
			-- Create file object with `a_name' as file name
			-- and open file for both reading and writing.
		require
			string_exists: a_name /= Void
			string_not_empty: not a_name.is_empty
		do
			make_with_name (a_name)
			open_read_write
		ensure
			file_named: internal_name = a_name
			exists: exists
			open_read: is_open_read
			open_write: is_open_write
		end

	make_create_read_write (a_name: READABLE_STRING_GENERAL)
			-- Create file object with `a_name' as file name
			-- and open file for both reading and writing;
			-- create it if it does not exist.
		require
			string_exists: a_name /= Void
			string_not_empty: not a_name.is_empty
		do
			make_with_name (a_name)
			create_read_write
		ensure
			file_named: internal_name = a_name
			exists: exists
			open_read: is_open_read
			open_write: is_open_write
		end

	make_open_read_append (a_name: READABLE_STRING_GENERAL)
			-- Create file object with `a_name' as file name
			-- and open file for reading anywhere
			-- but writing at the end only.
			-- Create file if it does not exist.
		require
			string_exists: a_name /= Void
			string_not_empty: not a_name.is_empty
		do
			make_with_name (a_name)
			open_read_append
		ensure
			file_named: internal_name = a_name
			exists: exists
			open_read: is_open_read
			open_append: is_open_append
		end

feature -- Access

	path: PATH
			-- Associated path of Current.
		do
			create Result.make_from_string (internal_name)
		ensure
			entry_not_empty: not Result.is_empty
		end

	item: CHARACTER
			-- Current item
		do
			if not is_close then
				read_character
				Result := last_character
				back
			end
		end

	position: INTEGER
			-- Current cursor position.
		do
			if not is_closed then
				Result := file_tell (file_pointer)
			end
		end

	file_pointer: POINTER
			-- File pointer as required in C

	retrieved: detachable ANY
			-- Retrieved object structure
			-- To access resulting object under correct type,
			-- use assignment attempt.
			-- Will raise an exception (code `Retrieve_exception')
			-- if content is not a stored Eiffel structure.
		deferred
		end

	read_natural_16_big_endian
			-- Read the next 16-bit natural in the file (Reading in Big-Endian order).
			-- Make the result available in `last_natural_16'.
		require
			File_Readable:is_readable
			Can_Read: can_read_16
		do
			lock_mutex
			internal_read_natural_16_big_endian
			unlock_mutex
		end

	read_natural_32_big_endian, read_natural_big_endian
			-- Read the next 32-bit natural in the file (Reading in Big-Endian order).
			-- Make the result available in `last_natural_32'.
		require
			File_Readable:is_readable
			Can_Read: can_read_32
		do
			lock_mutex
			internal_read_natural_32_big_endian
			unlock_mutex
		end

	read_natural_64_big_endian
			-- Read the next 64-bit natural in the file (Reading in Big-Endian order).
			-- Make the result available in `last_natural_64'.
		require
			File_Readable:is_readable
			Can_Read: can_read_64
		do
			lock_mutex
			internal_read_natural_64_big_endian
			unlock_mutex
		end

	read_natural_16_little_endian
			-- Read the next 16-bit natural in the file (Reading in Little-Endian order).
			-- Make the result available in `last_natural_16'.
		require
			File_Readable:is_readable
			Can_Read: can_read_16
		do
			lock_mutex
			internal_read_natural_16_little_endian
			unlock_mutex
		end

	read_natural_32_little_endian, read_natural_little_endian
			-- Read the next 32-bit natural in the file (Reading in Little-Endian order).
			-- Make the result available in `last_natural_32'.
		require
			File_Readable:is_readable
			Can_Read: can_read_32
		do
			lock_mutex
			internal_read_natural_32_little_endian
			unlock_mutex
		end

	read_natural_64_little_endian
			-- Read the next 64-bit natural in the file (Reading in Little-Endian order).
			-- Make the result available in `last_natural_64'.
		require
			File_Readable:is_readable
			Can_Read: can_read_64
		do
			lock_mutex
			internal_read_natural_64_little_endian
			unlock_mutex
		end

	read_real_big_endian, readreal_big_endian
			-- Read a new real (Reading in Big-Endian order).
			-- Make result available in last_real.
		require
			File_Readable:is_readable
			Can_Read: can_read_32
		local
			l_old_natural:NATURAL_32
		do
			lock_mutex
			l_old_natural := last_natural
			internal_read_natural_32_big_endian
			last_real:={SHARED_EXTERNAL}.natural_32_to_real_32(last_natural_32)
			last_natural := l_old_natural
			unlock_mutex
		end

	read_double_big_endian, readdouble_big_endian
			-- Read a new double (Reading in Big-Endian order).
			-- Make result available in last_double.
		require
			File_Readable:is_readable
			Can_Read: can_read_64
		local
			l_old_natural_64:NATURAL_64
		do
			lock_mutex
			l_old_natural_64 := last_natural_64
			internal_read_natural_64_big_endian
			last_double:={SHARED_EXTERNAL}.natural_64_to_real_64(last_natural_64)
			last_natural_64 := l_old_natural_64
			unlock_mutex
		end

	read_real_little_endian, readreal_little_endian
			-- Read a new real (Reading in Little-Endian order).
			-- Make result available in last_real.
		require
			File_Readable:is_readable
			Can_Read: can_read_32
		local
			l_old_natural:NATURAL_32
		do
			lock_mutex
			l_old_natural := last_natural
			internal_read_natural_32_little_endian
			last_real:={SHARED_EXTERNAL}.natural_32_to_real_32(last_natural_32)
			last_natural := l_old_natural
			unlock_mutex
		end

	read_double_little_endian, readdouble_little_endian
			-- Read a new double (Reading in Little-Endian order).
			-- Make result available in last_double.
		require
			File_Readable:is_readable
			Can_Read: can_read_64
		local
			l_old_natural_64:NATURAL_64
		do
			lock_mutex
			l_old_natural_64 := last_natural_64
			internal_read_natural_64_little_endian
			last_double:={SHARED_EXTERNAL}.natural_64_to_real_64(last_natural_64)
			last_natural_64 := l_old_natural_64
			unlock_mutex
		end

	read_integer_16_big_endian
			-- Read a new 16-bit integer (Reading in Big-Endian order).
			-- Make result available in last_integer_16.
		require
			File_Readable:is_readable
			Can_Read: can_read_16
		local
			l_old_natural_16:NATURAL_16
		do
			lock_mutex
			l_old_natural_16 := last_natural_16
			internal_read_natural_16_big_endian
			last_integer_16:=last_natural_16.as_integer_16
			last_natural_16 := l_old_natural_16
			unlock_mutex
		end

	read_integer_32_big_endian, read_integer_big_endian
			-- Read a new 32-bit integer (Reading in Big-Endian order).
			-- Make result available in last_integer_32.
		require
			File_Readable:is_readable
			Can_Read: can_read_32
		local
			l_old_natural:NATURAL_32
		do
			lock_mutex
			l_old_natural := last_natural
			internal_read_natural_32_big_endian
			last_integer:=last_natural_32.as_integer_32
			last_natural := l_old_natural
			unlock_mutex
		end

	read_integer_64_big_endian
			-- Read a new 64-bit integer (Reading in Big-Endian order).
			-- Make result available in last_integer_64.
		require
			File_Readable:is_readable
			Can_Read: can_read_64
		local
			l_old_natural_64:NATURAL_64
		do
			lock_mutex
			l_old_natural_64 := last_natural_64
			internal_read_natural_64_big_endian
			last_integer_64:=last_natural_64.as_integer_64
			last_natural_64 := l_old_natural_64
			unlock_mutex
		end

	read_integer_16_little_endian
			-- Read a new 16-bit integer (Reading in Little-Endian order).
			-- Make result available in last_integer_16.
		require
			File_Readable:is_readable
			Can_Read: can_read_16
		local
			l_old_natural_16:NATURAL_16
		do
			lock_mutex
			l_old_natural_16 := last_natural_16
			internal_read_natural_16_little_endian
			last_integer_16:=last_natural_16.as_integer_16
			last_natural_16 := l_old_natural_16
			unlock_mutex
		end

	read_integer_32_little_endian, read_integer_little_endian
			-- Read a new 32-bit integer (Reading in Little-Endian order).
			-- Make result available in last_integer_32.
		require
			File_Readable:is_readable
			Can_Read: can_read_32
		local
			l_old_natural:NATURAL_32
		do
			lock_mutex
			l_old_natural := last_natural
			internal_read_natural_32_little_endian
			last_integer:=last_natural_32.as_integer_32
			last_natural := l_old_natural
			unlock_mutex
		end

	read_integer_64_little_endian
			-- Read a new 64-bit integer (Reading in Little-Endian order).
			-- Make result available in last_integer_64.
		require
			File_Readable:is_readable
			Can_Read: can_read_64
		local
			l_old_natural_64:NATURAL_64
		do
			lock_mutex
			l_old_natural_64 := last_natural_64
			internal_read_natural_64_little_endian
			last_integer_64:=last_natural_64.as_integer_64
			last_natural_64 := l_old_natural_64
			unlock_mutex
		end

	put_natural_16_big_endian(a_value:NATURAL_16)
			-- Write `a_value' at current position (Writing in Big-Endian order).
		require
			extendible: extendible
		do
			lock_mutex
			internal_put_natural_16_big_endian(a_value)
			unlock_mutex
		end

	put_natural_16_little_endian(a_value:NATURAL_16)
			-- Write `a_value' at current position (Writing in Little-Endian order).
		require
			extendible: extendible
		do
			lock_mutex
			internal_put_natural_16_little_endian(a_value)
			unlock_mutex
		end

	put_natural_32_big_endian(a_value:NATURAL_32)
			-- Write `a_value' at current position (Writing in Big-Endian order).
		require
			extendible: extendible
		do
			lock_mutex
			internal_put_natural_32_big_endian(a_value)
			unlock_mutex
		end

	put_natural_32_little_endian(a_value:NATURAL_32)
			-- Write `a_value' at current position (Writing in Little-Endian order).
		require
			extendible: extendible
		do
			lock_mutex
			internal_put_natural_32_little_endian(a_value)
			unlock_mutex
		end

	put_natural_64_big_endian(a_value:NATURAL_64)
			-- Write `a_value' at current position (Writing in Big-Endian order).
		require
			extendible: extendible
		do
			lock_mutex
			internal_put_natural_32_big_endian(a_value.bit_shift_right (32).to_natural_32)
			internal_put_natural_32_big_endian(a_value.bit_and (0xFFFFFFFF).to_natural_32)
			unlock_mutex
		end

	put_natural_64_little_endian(a_value:NATURAL_64)
			-- Write `a_value' at current position (Writing in Little-Endian order).
		require
			extendible: extendible
		do
			lock_mutex
			internal_put_natural_32_little_endian(a_value.bit_and (0xFFFFFFFF).to_natural_32)
			internal_put_natural_32_little_endian(a_value.bit_shift_right (32).to_natural_32)
			unlock_mutex
		end

	put_integer_16_big_endian(a_value:INTEGER_16)
			-- Write `a_value' at current position (Writing in Big-Endian order).
		do
			put_natural_16_big_endian (a_value.as_natural_16)
		end

	put_integer_32_big_endian, put_integer_big_endian, putint_big_endian(a_value:INTEGER_32)
			-- Write `a_value' at current position (Writing in Big-Endian order).
		do
			put_natural_32_big_endian (a_value.as_natural_32)
		end

	put_integer_64_big_endian(a_value:INTEGER_64)
			-- Write `a_value' at current position (Writing in Big-Endian order).
		do
			put_natural_64_big_endian (a_value.as_natural_64)
		end

	put_real_big_endian, putreal_big_endian(a_value:REAL_32)
			-- Write `a_value' at current position (Writing in Big-Endian order).
		do
			put_natural_32_big_endian ({SHARED_EXTERNAL}.real_32_to_natural_32(a_value))
		end

	put_double_big_endian, putdouble_big_endian(a_value:REAL_64)
			-- Write `a_value' at current position (Writing in Big-Endian order).
		do
			put_natural_64_big_endian ({SHARED_EXTERNAL}.real_64_to_natural_64(a_value))
		end

	put_integer_16_little_endian(a_value:INTEGER_16)
			-- Write `a_value' at current position (Writing in little-Endian order).
		do
			put_natural_16_little_endian (a_value.as_natural_16)
		end

	put_integer_32_little_endian, put_integer_little_endian, putint_little_endian(a_value:INTEGER_32)
			-- Write `a_value' at current position (Writing in little-Endian order).
		do
			put_natural_32_little_endian (a_value.as_natural_32)
		end

	put_integer_64_little_endian(a_value:INTEGER_64)
			-- Write `a_value' at current position (Writing in little-Endian order).
		do
			put_natural_64_little_endian (a_value.as_natural_64)
		end

	put_real_little_endian, putreal_little_endian(a_value:REAL_32)
			-- Write `a_value' at current position (Writing in little-Endian order).
		do
			put_natural_32_little_endian ({SHARED_EXTERNAL}.real_32_to_natural_32(a_value))
		end

	put_double_little_endian, putdouble_little_endian(a_value:REAL_64)
			-- Write `a_value' at current position (Writing in Little-Endian order).
		do
			put_natural_64_little_endian ({SHARED_EXTERNAL}.real_64_to_natural_64(a_value))
		end

feature -- Measurement

	count: INTEGER
			-- Size in bytes (0 if no associated physical file)
		require
			Exists: exists
		do
			Result := {GAME_FILE_EXTERNAL}.sdl_rw_size(file_pointer)
		end

	before: BOOLEAN
			-- Is there no valid cursor position to the left of cursor position?
		do
			Result := is_closed
		end

	off: BOOLEAN
			-- Is there no item?
		do
			Result := (count = 0) or else is_closed or else end_of_file
		end

	end_of_file: BOOLEAN
			-- Has an EOF been detected?
		require
			opened: not is_closed
		do
			Result := position < 0 or position >= count
		end

	exists: BOOLEAN
			-- Does physical file exist?
		do
			if is_closed then
				Result := is_readable
			else
				Result := True
			end
		end

	is_readable: BOOLEAN
			-- Is file readable?
		local
			l_file:POINTER
			l_name:STRING
			l_c_name, l_c_mode:C_STRING
			l_utf_converter:UTF_CONVERTER
			l_error:INTEGER
		do
			l_name := l_utf_converter.string_32_to_utf_8_string_8 (internal_name.as_string_32)
			create l_c_name.make (l_name)
			create l_c_mode.make ("rb")
			l_file := {GAME_FILE_EXTERNAL}.sdl_rw_from_file(l_c_name.item, l_c_mode.item)
			Result := not l_file.is_default_pointer
			if not l_file.is_default_pointer then
				Result := True
				l_error := {GAME_FILE_EXTERNAL}.sdl_rw_close(l_file)
			else
				Result := False
			end
		end

	is_writable: BOOLEAN
			-- Is file writable?
			-- (Checks write permission for effective UID.)
		local
			l_file:POINTER
			l_name:STRING
			l_c_name, l_c_mode:C_STRING
			l_utf_converter:UTF_CONVERTER
			l_error:INTEGER
		do
			l_name := l_utf_converter.string_32_to_utf_8_string_8 (internal_name.as_string_32)
			create l_c_name.make (l_name)
			create l_c_mode.make ("ab")
			l_file := {GAME_FILE_EXTERNAL}.sdl_rw_from_file(l_c_name.item, l_c_mode.item)
			Result := not l_file.is_default_pointer
			if not l_file.is_default_pointer then
				Result := True
				l_error := {GAME_FILE_EXTERNAL}.sdl_rw_close(l_file)
			else
				Result := False
			end
		end

	can_read_16:BOOLEAN
			-- There is another 16 bits in the stream to read.
		require
			File_Readable:is_readable
		do
			Result:=count-position>1
		end

	can_read_32:BOOLEAN
			-- There is another 16 bits in the stream to read.
		require
			File_Readable:is_readable
		do
			Result:=count-position>3
		end

	can_read_64:BOOLEAN
			-- There is another 16 bits in the stream to read.
		require
			File_Readable:is_readable
		do
			Result:=count-position>7
		end

feature -- Status report

	after: BOOLEAN
			-- Is there no valid cursor position to the right of cursor position?
		do
			Result := not is_closed and then (end_of_file or count = 0)
		end

feature {GAME_RESSOURCE_MANAGER} -- Access

	is_thread_safe:BOOLEAN
			-- Is `Current' can be used in a multi-threaded system.

	enable_thread_safe
			-- Make `Current' usable in a multi-threaded system.
		do
			is_thread_safe:=true
		end

	disable_thread_safe
			-- Make `Current' unusable in a multi-threaded system.
		do
			is_thread_safe:=true
		end

	internal_mutex:MUTEX
			-- A mutex to sinchronize the file input/output and position

	lock_mutex
			-- Lock the internal mutex to prevent multiple access to the package file
		do
			if is_thread_safe then
				internal_mutex.lock
			end

		end

	unlock_mutex
			-- Unlock the internal mutex
		do
			if is_thread_safe then
				internal_mutex.unlock
			end
		end

feature {NONE} -- Implementation

	internal_read_natural_16_big_endian
			-- Read the next 16-bit natural in the file (Reading in Big-Endian order).
			-- Make the result available in `last_natural_16'.
		require
			File_Readable:is_readable
		local
			l_temp:NATURAL_16
			l_old_natural_8:NATURAL_8
		do
			l_old_natural_8 := last_natural_8
			read_natural_8
			l_temp:=last_natural_8.to_natural_16.bit_shift_left (8)
			read_natural_8
			last_natural_16:=last_natural_8.to_natural_16.bit_or (l_temp)
			last_natural_8 := l_old_natural_8
		end

	internal_read_natural_32_big_endian
			-- Read the next 32-bit natural in the file (Reading in Big-Endian order).
			-- Make the result available in `last_natural_32'.
		require
			File_Readable:is_readable
		local
			l_temp:NATURAL_32
			l_old_natural_16:NATURAL_16
		do
			l_old_natural_16 := last_natural_16
			internal_read_natural_16_big_endian
			l_temp:=last_natural_16.to_natural_32.bit_shift_left (16)
			internal_read_natural_16_big_endian
			last_natural:=last_natural_16.to_natural_32.bit_or (l_temp)
			last_natural_16 := l_old_natural_16
		end

	internal_read_natural_64_big_endian
			-- Read the next 64-bit natural in the file (Reading in Big-Endian order).
			-- Make the result available in `last_natural_64'.
		require
			File_Readable:is_readable
		local
			l_temp:NATURAL_64
			l_old_natural:NATURAL_32
		do
			l_old_natural := last_natural
			internal_read_natural_32_big_endian
			l_temp:=last_natural_32.to_natural_64.bit_shift_left (16)
			internal_read_natural_32_big_endian
			last_natural_64:=last_natural_32.to_natural_64.bit_or (l_temp)
			last_natural := l_old_natural
		end

	internal_read_natural_16_little_endian
			-- Read the next 16-bit natural in the file (Reading in Little-Endian order).
			-- Make the result available in `last_natural_16'.
		require
			File_Readable:is_readable
		local
			l_temp:NATURAL_16
			l_old_natural_8:NATURAL_8
		do
			l_old_natural_8 := last_natural_8
			read_natural_8
			l_temp:=last_natural_8.to_natural_16
			read_natural_8
			last_natural_16:=l_temp.bit_or (last_natural_8.to_natural_16.bit_shift_left (8))
			last_natural_8 := l_old_natural_8
		end

	internal_read_natural_32_little_endian
			-- Read the next 32-bit natural in the file (Reading in Little-Endian order).
			-- Make the result available in `last_natural_32'.
		require
			File_Readable:is_readable
		local
			l_temp:NATURAL_32
			l_old_natural_16:NATURAL_16
		do
			l_old_natural_16 := last_natural_16
			internal_read_natural_16_little_endian
			l_temp:=last_natural_16.to_natural_32
			internal_read_natural_16_little_endian
			last_natural:=l_temp.bit_or (last_natural_16.to_natural_32.bit_shift_left (16))
			last_natural_16 := l_old_natural_16
		end

	internal_read_natural_64_little_endian
			-- Read the next 64-bit natural in the file (Reading in Little-Endian order).
			-- Make the result available in `last_natural_64'.
		require
			File_Readable:is_readable
		local
			l_temp:NATURAL_64
			l_old_natural:NATURAL_32
		do
			l_old_natural := last_natural
			internal_read_natural_32_little_endian
			l_temp:=last_natural_32.to_natural_64
			internal_read_natural_32_little_endian
			last_natural_64:=l_temp.bit_or (last_natural_32.to_natural_64.bit_shift_left (16))
			last_natural := l_old_natural
		end

	internal_put_natural_16_big_endian(a_value:NATURAL_16)
			-- Write `a_value' at current position (Writing in Big-Endian order).
		require
			extendible: extendible
		do
			put_natural_8 (a_value.bit_shift_right (8).to_natural_8)
			put_natural_8 (a_value.bit_and (0xFF).to_natural_8)
		end

	internal_put_natural_16_little_endian(a_value:NATURAL_16)
			-- Write `a_value' at current position (Writing in Little-Endian order).
		require
			extendible: extendible
		do
			put_natural_8 (a_value.bit_and (0xFF).to_natural_8)
			put_natural_8 (a_value.bit_shift_right (8).to_natural_8)
		end

	internal_put_natural_32_big_endian(a_value:NATURAL_32)
			-- Write `a_value' at current position (Writing in Big-Endian order).
		require
			extendible: extendible
		do
			internal_put_natural_16_big_endian(a_value.bit_shift_right (16).to_natural_16)
			internal_put_natural_16_big_endian(a_value.bit_and (0xFFFF).to_natural_16)
		end

	internal_put_natural_32_little_endian(a_value:NATURAL_32)
			-- Write `a_value' at current position (Writing in Little-Endian order).
		require
			extendible: extendible
		do
			internal_put_natural_16_little_endian(a_value.bit_and (0xFFFF).to_natural_16)
			internal_put_natural_16_little_endian(a_value.bit_shift_right (16).to_natural_16)
		end

invariant
	File_Ptr_Not_Null: not (is_closed xor file_pointer.is_default_pointer)

end
